[*] Start mutation process:
   - targets: MyStack
   - tests: MyStackTest
[*] 3 tests passed:
   - MyStackTest [0.00076 s]
[*] Start mutants generation and execution:
   - [#   1] AOD MyStack:17 : 
--------------------------------------------------------------------------------
 13:         return self.items.pop()
 14:     
 15:     def peek(self):
 16:         if self.items:
~17:             return self.items[1]
 18:     
 19:     def isEmpty(self):
 20:         return self.items == []
 21:     
 22:     def isFull(self):
--------------------------------------------------------------------------------
[0.00831 s] killed by test_shouldReturnValueWithoutDelete (MyStackTest.MyStackTest)
   - [#   2] AOR MyStack:17 : 
--------------------------------------------------------------------------------
 13:         return self.items.pop()
 14:     
 15:     def peek(self):
 16:         if self.items:
~17:             return self.items[(+1)]
 18:     
 19:     def isEmpty(self):
 20:         return self.items == []
 21:     
 22:     def isFull(self):
--------------------------------------------------------------------------------
[0.01116 s] killed by test_shouldReturnValueWithoutDelete (MyStackTest.MyStackTest)
   - [#   3] COI MyStack:7  : 
--------------------------------------------------------------------------------
  3:         self.maxSize = size
  4:         self.items = []
  5:     
  6:     def push(self, data):
~ 7:         if (not self.maxSize > self.items.__len__()):
  8:             self.items.append(data)
  9:         else:
 10:             raise Exception('ArrayIndexOutOfBoundsException')
 11:     
 12:     def pop(self):
--------------------------------------------------------------------------------
[0.00990 s] killed by test_shouldInsertAndRemoveWithoutProblem (MyStackTest.MyStackTest)
   - [#   4] COI MyStack:16 : 
--------------------------------------------------------------------------------
 12:     def pop(self):
 13:         return self.items.pop()
 14:     
 15:     def peek(self):
~16:         if (not self.items):
 17:             return self.items[(-1)]
 18:     
 19:     def isEmpty(self):
 20:         return self.items == []
 21:     
--------------------------------------------------------------------------------
[0.00863 s] killed by test_shouldReturnValueWithoutDelete (MyStackTest.MyStackTest)
   - [#   5] COI MyStack:25 : 
--------------------------------------------------------------------------------
 21:     
 22:     def isFull(self):
 23:         return self.items.__len__() == self.maxSize
 24: 
~25: if (not __name__ == '__main__'):
 26:     s = MyStack(5)
 27:     s.push(10)
 28:     s.push(20)
 29:     s.push(30)
 30:     s.push(40)
--------------------------------------------------------------------------------
50
 
40
 
30
 
20
 
10
 
end
[0.00720 s] survived
   - [#   6] COI MyStack:33 : 
--------------------------------------------------------------------------------
 29:     s.push(30)
 30:     s.push(40)
 31:     s.push(50)
 32:     
~33:     while (not s.isEmpty() == False):
 34:         print(s.pop())
 35:         print(' ')
 36:     
 37:     print('end')
--------------------------------------------------------------------------------
[0.00828 s] survived
   - [#   7] CRP MyStack:10 : 
--------------------------------------------------------------------------------
  6:     def push(self, data):
  7:         if self.maxSize > self.items.__len__():
  8:             self.items.append(data)
  9:         else:
~10:             raise Exception('mutpy')
 11:     
 12:     def pop(self):
 13:         return self.items.pop()
 14:     
 15:     def peek(self):
--------------------------------------------------------------------------------
[0.00756 s] survived
   - [#   8] CRP MyStack:10 : 
--------------------------------------------------------------------------------
  6:     def push(self, data):
  7:         if self.maxSize > self.items.__len__():
  8:             self.items.append(data)
  9:         else:
~10:             raise Exception('')
 11:     
 12:     def pop(self):
 13:         return self.items.pop()
 14:     
 15:     def peek(self):
--------------------------------------------------------------------------------
[0.00708 s] survived
   - [#   9] CRP MyStack:17 : 
--------------------------------------------------------------------------------
 13:         return self.items.pop()
 14:     
 15:     def peek(self):
 16:         if self.items:
~17:             return self.items[(-2)]
 18:     
 19:     def isEmpty(self):
 20:         return self.items == []
 21:     
 22:     def isFull(self):
--------------------------------------------------------------------------------
[0.00952 s] killed by test_shouldReturnValueWithoutDelete (MyStackTest.MyStackTest)
   - [#  10] CRP MyStack:25 : 
--------------------------------------------------------------------------------
 21:     
 22:     def isFull(self):
 23:         return self.items.__len__() == self.maxSize
 24: 
~25: if __name__ == 'mutpy':
 26:     s = MyStack(5)
 27:     s.push(10)
 28:     s.push(20)
 29:     s.push(30)
 30:     s.push(40)
--------------------------------------------------------------------------------
[0.00795 s] survived
   - [#  11] CRP MyStack:25 : 
--------------------------------------------------------------------------------
 21:     
 22:     def isFull(self):
 23:         return self.items.__len__() == self.maxSize
 24: 
~25: if __name__ == '':
 26:     s = MyStack(5)
 27:     s.push(10)
 28:     s.push(20)
 29:     s.push(30)
 30:     s.push(40)
--------------------------------------------------------------------------------
[0.00700 s] survived
   - [#  12] CRP MyStack:26 : 
--------------------------------------------------------------------------------
 22:     def isFull(self):
 23:         return self.items.__len__() == self.maxSize
 24: 
 25: if __name__ == '__main__':
~26:     s = MyStack(6)
 27:     s.push(10)
 28:     s.push(20)
 29:     s.push(30)
 30:     s.push(40)
 31:     s.push(50)
--------------------------------------------------------------------------------
[0.00710 s] survived
   - [#  13] CRP MyStack:27 : 
--------------------------------------------------------------------------------
 23:         return self.items.__len__() == self.maxSize
 24: 
 25: if __name__ == '__main__':
 26:     s = MyStack(5)
~27:     s.push(11)
 28:     s.push(20)
 29:     s.push(30)
 30:     s.push(40)
 31:     s.push(50)
 32:     
--------------------------------------------------------------------------------
[0.00986 s] survived
   - [#  14] CRP MyStack:28 : 
--------------------------------------------------------------------------------
 24: 
 25: if __name__ == '__main__':
 26:     s = MyStack(5)
 27:     s.push(10)
~28:     s.push(21)
 29:     s.push(30)
 30:     s.push(40)
 31:     s.push(50)
 32:     
 33:     while s.isEmpty() == False:
--------------------------------------------------------------------------------
[0.00717 s] survived
   - [#  15] CRP MyStack:29 : 
--------------------------------------------------------------------------------
 25: if __name__ == '__main__':
 26:     s = MyStack(5)
 27:     s.push(10)
 28:     s.push(20)
~29:     s.push(31)
 30:     s.push(40)
 31:     s.push(50)
 32:     
 33:     while s.isEmpty() == False:
 34:         print(s.pop())
--------------------------------------------------------------------------------
[0.00716 s] survived
   - [#  16] CRP MyStack:30 : 
--------------------------------------------------------------------------------
 26:     s = MyStack(5)
 27:     s.push(10)
 28:     s.push(20)
 29:     s.push(30)
~30:     s.push(41)
 31:     s.push(50)
 32:     
 33:     while s.isEmpty() == False:
 34:         print(s.pop())
 35:         print(' ')
--------------------------------------------------------------------------------
[0.01227 s] survived
   - [#  17] CRP MyStack:31 : 
--------------------------------------------------------------------------------
 27:     s.push(10)
 28:     s.push(20)
 29:     s.push(30)
 30:     s.push(40)
~31:     s.push(51)
 32:     
 33:     while s.isEmpty() == False:
 34:         print(s.pop())
 35:         print(' ')
 36:     
--------------------------------------------------------------------------------
[0.00717 s] survived
   - [#  18] CRP MyStack:35 : 
--------------------------------------------------------------------------------
 31:     s.push(50)
 32:     
 33:     while s.isEmpty() == False:
 34:         print(s.pop())
~35:         print('mutpy')
 36:     
 37:     print('end')
--------------------------------------------------------------------------------
[0.00707 s] survived
   - [#  19] CRP MyStack:35 : 
--------------------------------------------------------------------------------
 31:     s.push(50)
 32:     
 33:     while s.isEmpty() == False:
 34:         print(s.pop())
~35:         print('')
 36:     
 37:     print('end')
--------------------------------------------------------------------------------
[0.00713 s] survived
   - [#  20] CRP MyStack:37 : 
--------------------------------------------------------------------------------
 33:     while s.isEmpty() == False:
 34:         print(s.pop())
 35:         print(' ')
 36:     
~37:     print('mutpy')
--------------------------------------------------------------------------------
[0.00789 s] survived
   - [#  21] CRP MyStack:37 : 
--------------------------------------------------------------------------------
 33:     while s.isEmpty() == False:
 34:         print(s.pop())
 35:         print(' ')
 36:     
~37:     print('')
--------------------------------------------------------------------------------
[0.00750 s] survived
   - [#  22] ROR MyStack:7  : 
--------------------------------------------------------------------------------
  3:         self.maxSize = size
  4:         self.items = []
  5:     
  6:     def push(self, data):
~ 7:         if self.maxSize < self.items.__len__():
  8:             self.items.append(data)
  9:         else:
 10:             raise Exception('ArrayIndexOutOfBoundsException')
 11:     
 12:     def pop(self):
--------------------------------------------------------------------------------
[0.00801 s] killed by test_shouldInsertAndRemoveWithoutProblem (MyStackTest.MyStackTest)
   - [#  23] ROR MyStack:7  : 
--------------------------------------------------------------------------------
  3:         self.maxSize = size
  4:         self.items = []
  5:     
  6:     def push(self, data):
~ 7:         if self.maxSize >= self.items.__len__():
  8:             self.items.append(data)
  9:         else:
 10:             raise Exception('ArrayIndexOutOfBoundsException')
 11:     
 12:     def pop(self):
--------------------------------------------------------------------------------
[0.00716 s] survived
   - [#  24] ROR MyStack:20 : 
--------------------------------------------------------------------------------
 16:         if self.items:
 17:             return self.items[(-1)]
 18:     
 19:     def isEmpty(self):
~20:         return self.items != []
 21:     
 22:     def isFull(self):
 23:         return self.items.__len__() == self.maxSize
 24: 
 25: if __name__ == '__main__':
--------------------------------------------------------------------------------
[0.01102 s] killed by test_shouldReturnValueWithoutDelete (MyStackTest.MyStackTest)
   - [#  25] ROR MyStack:23 : 
--------------------------------------------------------------------------------
 19:     def isEmpty(self):
 20:         return self.items == []
 21:     
 22:     def isFull(self):
~23:         return self.items.__len__() != self.maxSize
 24: 
 25: if __name__ == '__main__':
 26:     s = MyStack(5)
 27:     s.push(10)
 28:     s.push(20)
--------------------------------------------------------------------------------
[0.01191 s] killed by test_shouldSayStackIsFull (MyStackTest.MyStackTest)
   - [#  26] ROR MyStack:25 : 
--------------------------------------------------------------------------------
 21:     
 22:     def isFull(self):
 23:         return self.items.__len__() == self.maxSize
 24: 
~25: if __name__ != '__main__':
 26:     s = MyStack(5)
 27:     s.push(10)
 28:     s.push(20)
 29:     s.push(30)
 30:     s.push(40)
--------------------------------------------------------------------------------
50
 
40
 
30
 
20
 
10
 
end
[0.01010 s] survived
   - [#  27] ROR MyStack:33 : 
--------------------------------------------------------------------------------
 29:     s.push(30)
 30:     s.push(40)
 31:     s.push(50)
 32:     
~33:     while s.isEmpty() != False:
 34:         print(s.pop())
 35:         print(' ')
 36:     
 37:     print('end')
--------------------------------------------------------------------------------
[0.00788 s] survived
[*] Mutation score [0.61186 s]: 29.6%
   - all: 27
   - killed: 8 (29.6%)
   - survived: 19 (70.4%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
